name: Hoppscotch API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Changed to write for publishing to gh-pages branch
  pages: write     # Added for GitHub Pages
  id-token: write  # Added for GitHub Pages
  checks: write
  issues: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js v20
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Hoppscotch CLI v0.21.0
      run: |
        echo "Installing Hoppscotch CLI v0.21.0 (compatible with Node.js v20)"
        npm install -g @hoppscotch/cli@0.21.0
        
        # Verify installation
        hopp -v

    - name: Verify Environment File
      run: |
        echo "Verifying temp_env.json file exists"
        if [ -f chabbi_project/temp_env.json ]; then
          echo "temp_env.json file found"
        else
          echo "ERROR: temp_env.json file not found at chabbi_project/temp_env.json"
          exit 1
        fi

    - name: Run Hoppscotch Tests
      id: run-tests
      run: |
        echo "Running Hoppscotch tests with v0.21.0"
        cd chabbi_project
        echo "Running tests with temp file:"
        mkdir -p test-results
        
        # Run the tests with JUnit reporter as per Hoppscotch documentation
        echo "Running tests with JUnit reporter..."
        hopp test auth/auth.json --env temp_env.json --reporter-junit test-results/junit-report.xml
        TEST_EXIT_CODE=$?
        
        # Check if JUnit report was generated
        echo "Checking generated JUnit report file:"
        ls -la test-results/
        
        # Examine JUnit XML structure for debugging
        if [ -f test-results/junit-report.xml ]; then
          echo "First 30 lines of JUnit XML:"
          head -n 30 test-results/junit-report.xml
        fi
        
        # Report test status
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "Tests failed with exit code: $TEST_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "Tests failed with exit code: $TEST_EXIT_CODE"
        else
          echo "Tests passed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Tests passed successfully"
        fi
        
        # Exit with success even if tests fail to ensure we upload artifacts
        exit 0

    - name: Convert XML to HTML using Python
      if: always()
      run: |
        echo "Converting JUnit XML to HTML report using Python..."
        
        # Create a directory for GitHub Pages
        mkdir -p _site
        
        # Run the Python script to convert XML to HTML
        if [ -f chabbi_project/test-results/junit-report.xml ]; then
          python .github/junit_to_html.py chabbi_project/test-results/junit-report.xml _site/test-report.html
          echo "HTML report generated successfully at _site/test-report.html"
          
          # Create an index.html file that automatically redirects to test-report.html
          cat > _site/index.html << 'EOL'
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="refresh" content="0; url='./test-report.html'" />
    <title>Redirecting to Test Report</title>
  </head>
  <body>
    <p>Please wait while you are being redirected to the <a href="./test-report.html">test report</a>.</p>
  </body>
</html>
EOL
          
          # Add .nojekyll file to prevent GitHub Pages from processing with Jekyll
          touch _site/.nojekyll
        else
          echo "ERROR: JUnit XML file not found, cannot generate HTML report"
          # Create an error HTML file
          echo "<html><body><h1>Error</h1><p>JUnit XML report was not found.</p></body></html>" > _site/test-report.html
          
          # Create an index.html file that redirects to the error page
          cat > _site/index.html << 'EOL'
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="refresh" content="0; url='./test-report.html'" />
    <title>Redirecting to Test Report</title>
  </head>
  <body>
    <p>Please wait while you are being redirected to the <a href="./test-report.html">test report</a>.</p>
  </body>
</html>
EOL
          
          touch _site/.nojekyll
        fi

    - name: Upload JUnit XML Results
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: junit-test-results
        path: chabbi_project/test-results/junit-report.xml
        retention-days: 7
        
    - name: Upload HTML Report as Artifact
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: html-test-results
        path: _site/
        retention-days: 7
        
    # Deploy report to GitHub Pages
    - name: Configure GitHub Pages
      uses: actions/configure-pages@v4
      if: github.event_name != 'pull_request'
      
    - name: Upload GitHub Pages Artifact
      uses: actions/upload-pages-artifact@v3
      if: always() && github.event_name != 'pull_request'
      with:
        path: _site/
        
    - name: Deploy to GitHub Pages
      id: deployment
      if: always() && github.event_name != 'pull_request'
      uses: actions/deploy-pages@v4
        
    # Generate URL for reference in logs
    - name: Generate GitHub Pages URL Info
      if: always() && github.event_name != 'pull_request'
      run: |
        # Get the repository owner and name from the GitHub context
        REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
        
        # Generate the GitHub Pages URL dynamically
        GITHUB_PAGES_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}/"
        
        # Make it available in the logs
        echo ""
        echo "==================================================================================="
        echo "ðŸš€ HTML TEST REPORTS PUBLISHED TO GITHUB PAGES"
        echo "==================================================================================="
        echo ""
        echo "ðŸ“Š Report URL: $GITHUB_PAGES_URL"
        echo ""
        echo "This URL can be easily shared with team members to view the HTML test reports."
        echo "==================================================================================="
        
        # Write a simple text file to upload as an artifact
        echo "$GITHUB_PAGES_URL" > report_url.txt
        
    # Upload the URL as a simple artifact for easy access
    - name: Upload Report URL
      uses: actions/upload-artifact@v4
      if: always() && github.event_name != 'pull_request'
      with:
        name: report-url
        path: report_url.txt
        retention-days: 7