name: Hoppscotch API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  issues: read
  pull-requests: write
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Hoppscotch CLI v0.21.0
      run: |
        echo "Installing Hoppscotch CLI v0.21.0 (compatible with Node.js v20)"
        npm install -g @hoppscotch/cli@0.21.0
        
        # Verify installation
        hopp -v

    - name: Verify Environment File
      run: |
        echo "Verifying temp_env.json file exists"
        if [ -f chabbi_project/temp_env.json ]; then
          echo "temp_env.json file found"
        else
          echo "ERROR: temp_env.json file not found at chabbi_project/temp_env.json"
          exit 1
        fi

    - name: Run Hoppscotch Tests
      id: run-tests
      run: |
        echo "Running Hoppscotch tests with v0.21.0"
        cd chabbi_project
        echo "Running tests with temp file:"
        mkdir -p test-results
        
        # Run the tests with JUnit reporter as per Hoppscotch documentation
        echo "Running tests with JUnit reporter..."
        hopp test auth/auth.json --env temp_env.json --reporter-junit test-results/junit-report.xml
        TEST_EXIT_CODE=$?
        
        # Check if JUnit report was generated
        echo "Checking generated JUnit report file:"
        ls -la test-results/
        
        # Examine JUnit XML structure for debugging
        if [ -f test-results/junit-report.xml ]; then
          echo "First 30 lines of JUnit XML:"
          head -n 30 test-results/junit-report.xml
        fi
        
        # Report test status
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "Tests failed with exit code: $TEST_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "Tests failed with exit code: $TEST_EXIT_CODE"
        else
          echo "Tests passed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Tests passed successfully"
        fi
        
        # Exit with success even if tests fail to ensure we upload artifacts
        exit 0

    - name: Convert XML to HTML using Python
      if: always()
      run: |
        echo "Converting JUnit XML to HTML report using Python..."
        
        # Create a directory for HTML reports
        mkdir -p chabbi_project/test-results/html
        
        # Run the Python script to convert XML to HTML
        if [ -f chabbi_project/test-results/junit-report.xml ]; then
          python .github/junit_to_html.py chabbi_project/test-results/junit-report.xml chabbi_project/test-results/html/test-report.html
          echo "HTML report generated successfully"
          
          # Create index.html for GitHub Pages (required for root URL access)
          cp chabbi_project/test-results/html/test-report.html chabbi_project/test-results/html/index.html
          echo "Created index.html for GitHub Pages"
          
          # Display the HTML report content for debugging
          echo "HTML report file exists and has content:"
          ls -lah chabbi_project/test-results/html/
          echo "First few lines of HTML report:"
          head -n 10 chabbi_project/test-results/html/test-report.html
        else
          echo "ERROR: JUnit XML file not found, cannot generate HTML report"
          # Create a simple error HTML file using Python
          cat > chabbi_project/test-results/html/error.html << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Error in Test Report Generation</title>
    <style>
        body { font-family: sans-serif; margin: 40px; }
        .error { color: red; background: #ffeeee; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Error Generating Test Report</h1>
    <div class="error">
        <p><strong>An error occurred while generating the test report:</strong></p>
        <p>JUnit XML report was not found.</p>
    </div>
</body>
</html>
EOF
          # Also create index.html pointing to the error page
          cp chabbi_project/test-results/html/error.html chabbi_project/test-results/html/index.html
          echo "Created error.html and index.html for GitHub Pages"
        fi

    - name: Upload JUnit XML Results
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: junit-test-results
        path: chabbi_project/test-results/junit-report.xml
        retention-days: 7
        
    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: html-test-results
        path: chabbi_project/test-results/html/
        retention-days: 7
    
    # --- Begin GitHub Pages Deployment ---
    - name: Setup Pages
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5
    
    - name: Upload Pages Artifact
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'chabbi_project/test-results/html'
    
    - name: Deploy to GitHub Pages
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Report Deployment URL
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && steps.deployment.outputs.page_url != ''
      run: |
        echo "Test reports deployed to: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "View the test reports at: ${{ steps.deployment.outputs.page_url }}"
    # --- End GitHub Pages Deployment ---
    
    - name: Echo Success
      if: always()
      run: echo "CI/CD pipeline completed successfully"