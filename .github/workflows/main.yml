name: Hoppscotch API Tests

on:
  push:
    branches: [ main ] # Only trigger on push to main
  pull_request:
    branches: [ main ] # Only trigger on PR to main
  workflow_dispatch:   # Allow manual trigger

# Single place to configure the GitHub Pages settings
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  issues: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    # Single job that handles testing and deployment from main branch
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main  # Explicitly checkout main branch

    - name: Setup Node.js v20
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Hoppscotch CLI v0.21.0
      run: |
        echo "Installing Hoppscotch CLI v0.21.0 (compatible with Node.js v20)"
        npm install -g @hoppscotch/cli@0.21.0
        
        # Verify installation
        hopp -v

    - name: Verify Environment File
      run: |
        echo "Verifying temp_env.json file exists"
        if [ -f chabbi_project/temp_env.json ]; then
          echo "temp_env.json file found"
        else
          echo "ERROR: temp_env.json file not found at chabbi_project/temp_env.json"
          exit 1
        fi

    - name: Run Hoppscotch Tests
      id: run-tests
      run: |
        echo "Running Hoppscotch tests with v0.21.0"
        cd chabbi_project
        echo "Running tests with temp file:"
        mkdir -p test-results
        
        # Run the tests with JUnit reporter as per Hoppscotch documentation
        echo "Running tests with JUnit reporter..."
        hopp test auth/auth.json --env temp_env.json --reporter-junit test-results/junit-report.xml
        TEST_EXIT_CODE=$?
        
        # Check if JUnit report was generated
        echo "Checking generated JUnit report file:"
        ls -la test-results/
        
        # Examine JUnit XML structure for debugging
        if [ -f test-results/junit-report.xml ]; then
          echo "First 30 lines of JUnit XML:"
          head -n 30 test-results/junit-report.xml
        fi
        
        # Report test status
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "Tests failed with exit code: $TEST_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "Tests failed with exit code: $TEST_EXIT_CODE"
        else
          echo "Tests passed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Tests passed successfully"
        fi
        
        # Exit with success even if tests fail to ensure we upload artifacts
        exit 0

    - name: Convert XML to HTML using Python
      if: always()
      run: |
        echo "Converting JUnit XML to HTML report using Python..."
        
        # Create a directory for HTML reports
        mkdir -p chabbi_project/test-results/html
        
        # Run the Python script to convert XML to HTML
        if [ -f chabbi_project/test-results/junit-report.xml ]; then
          python .github/junit_to_html.py chabbi_project/test-results/junit-report.xml chabbi_project/test-results/html/test-report.html
          echo "HTML report generated successfully"
          
          # Rename test-report.html to index.html for direct display
          cp chabbi_project/test-results/html/test-report.html chabbi_project/test-results/html/index.html
          echo "Created index.html from test report"
          
          # Add .nojekyll file to prevent GitHub Pages from processing with Jekyll
          touch chabbi_project/test-results/html/.nojekyll
          echo "Added .nojekyll file"
          
          # List files to verify
          echo "Files to be deployed:"
          ls -la chabbi_project/test-results/html/
        else
          echo "ERROR: JUnit XML file not found, cannot generate HTML report"
          # Copy the error HTML file
          cp .github/error.html chabbi_project/test-results/html/error.html
          cp .github/error.html chabbi_project/test-results/html/index.html
          echo "Created error HTML files"
        fi

    - name: Upload JUnit XML Results
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: junit-test-results
        path: chabbi_project/test-results/junit-report.xml
        retention-days: 7
        
    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()  # Run even if tests fail
      with:
        name: html-test-reports
        path: chabbi_project/test-results/html/
        retention-days: 7
    
    # Configure GitHub Pages
    - name: Setup GitHub Pages
      if: always() && github.event_name != 'pull_request'
      uses: actions/configure-pages@v4
      
    # Upload directly to GitHub Pages
    - name: Upload artifact for GitHub Pages
      if: always() && github.event_name != 'pull_request'
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'chabbi_project/test-results/html'
        
    # Deploy to GitHub Pages using GitHub's native pages deployment
    - name: Deploy to GitHub Pages
      if: always() && github.event_name != 'pull_request'
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Echo Success and Report URLs
      if: always()
      run: |
        echo "CI/CD pipeline completed successfully from main branch"
        echo ""
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          # Get the repository owner and name from the GitHub context
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
          
          # Generate the GitHub Pages URL dynamically
          GITHUB_PAGES_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}/"
          
          echo "Test report URL: $GITHUB_PAGES_URL"
          echo "Test report URL: $GITHUB_PAGES_URL" >> $GITHUB_STEP_SUMMARY
        fi
